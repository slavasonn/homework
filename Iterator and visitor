#include <iostream>
#include <string>
#include <vector>

using namespace std;

class Element
{
public:
    virtual void accept(class Visitor& v) = 0;
};

class FirstPlace : public Element
{
public:
    void accept(Visitor& v);
    string firstPlace()
    {
        return "Dusty Floor";
    }
};

class SecondPlace : public Element
{
public:
    void accept(Visitor& v);
    string secondPlace()
    {
        return "Carpet";
    }
};

class ThirdPlace : public Element
{
public:
    void accept(Visitor& v);
    string thirdPlace()
    {
        return "Dusty Carpet";
    }
};

class Visitor
{
public:
    virtual void visit(FirstPlace* e) = 0;
    virtual void visit(SecondPlace* e) = 0;
    virtual void visit(ThirdPlace* e) = 0;
};

void FirstPlace::accept(Visitor& v)
{
    v.visit(this);
}

void SecondPlace::accept(Visitor& v)
{
    v.visit(this);
}

void ThirdPlace::accept(Visitor& v)
{
    v.visit(this);
}

class UpVisitor : public Visitor
{
    void visit(FirstPlace* e)
    {
        cout << "do Wet Clean on " + e->firstPlace() << '\n';
    }
    void visit(SecondPlace* e)
    {
        cout << "do Dry Clean on " + e->secondPlace() << '\n';
    }
    void visit(ThirdPlace* e)
    {
        cout << "do Mixed Clean on " + e->thirdPlace() << '\n';
    }
};

template <typename T, typename U>
class Iterator {
public:
    typedef typename std::vector<T>::iterator iter_type;
    Iterator(U* p_data, bool reverse = false) : m_p_data_(p_data) {
        m_it_ = m_p_data_->m_data_.begin();
    }

    void First() {
        m_it_ = m_p_data_->m_data_.begin();
    }

    void Next() {
        m_it_++;
    }

    bool IsDone() {
        return (m_it_ == m_p_data_->m_data_.end());
    }

    iter_type Current() {
        return m_it_;
    }

private:
    U* m_p_data_;
    iter_type m_it_;
};

template <class T>
class Container {
    friend class Iterator<T, Container>;

public:
    void Add(T a) {
        m_data_.push_back(a);
    }

    Iterator<T, Container>* CreateIterator() {
        return new Iterator<T, Container>(this);
    }

private:
    std::vector<T> m_data_;
};

class Data {
public:
    Data(int a = 0) : m_data_(a) {}

    void set_data(int a) {
        m_data_ = a;
    }

    int data() {
        return m_data_;
    }

private:
    int m_data_;
};

void ClientCode() {
    Element* list[] =
    {
      new FirstPlace(), new SecondPlace(), new ThirdPlace()
    };

    UpVisitor up;        
    for (int i = 0; i < 3; i++)
        
        list[i]->accept(up);
}

int main()
{
    ClientCode();
    return 0;
}
